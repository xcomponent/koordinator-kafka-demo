version: 2
references:
  restore_repo: &restore_repo
    restore_cache:
      name: Restore checked out code
      keys:
        - v1-code-{{ .Branch }}-{{ .Revision }}
        - v1-code-{{ .Branch }}-
        - v1-code

jobs:
  checkout_code:
    docker:
      - image: circleci/node:10.4
    steps:
      - *restore_repo
      - checkout
      - save_cache:
          key: v1-code-{{ .Branch }}-{{ .Revision }}
          paths:
            - .
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - .

  build_search_images:
    docker:
      - image: circleci/node:10.4
    steps:
      - *restore_repo
      - attach_workspace:
          at: /home/circleci/project
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "image-search/package.json" }}
          - v1-dependencies-
      - run:
          name: Install dependencies
          command: cd image-search && yarn install && cd ..
      - save_cache:
          paths:
            - image-search/node_modules
          key: v1-dependencies-{{ checksum "image-search/package.json" }}
      - run:
          name: Test run
          command: cd image-search && node index.js test output.txt && test -e output.txt
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - image-search/output.txt

  build_download_image:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - restore_cache:
          key: v1-dependencies-java-{{ checksum "download-image/pom.xml" }}
      - run: 
          name: Installing dependencies
          command: cd download-image && mvn dependency:go-offline && cd ..
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-java-{{ checksum "download-image/pom.xml" }}
      - run:
          name: Build
          command: cd download-image && ./build.sh && cd ..
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - download-image/target

  test_standalone:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - setup_remote_docker
      - run:
          name: Configure tests container
          command: |
            docker create -v /src --name configs alpine:3.7 /bin/true
            docker cp /home/circleci/project configs:/src
      - run:
          name: Run kafka container
          command: |
            docker run --name kafka -d --rm -p 2181:2181 -p 9092:9092 --env ADVERTISED_HOST=kafka --env ADVERTISED_PORT=9092 --env AUTO_CREATE_TOPICS=true -h kafka spotify/kafka
      - run:
          name: Run standalone tests with kafka
          command: |
            docker run --volumes-from configs --link kafka:kafka circleci/openjdk:8-jdk-browsers /src/project/.circleci/test-multi.sh

  test_koordinator:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - setup_remote_docker
      - run:
          name: Configure tests container
          command: |
            docker create -v /src --name configs alpine:3.7 /bin/true
            docker cp /home/circleci/project configs:/src
      - run:
          name: Run kafka container
          command: |
            docker run --name kafka -d --rm -p 2181:2181 -p 9092:9092 --env ADVERTISED_HOST=kafka --env ADVERTISED_PORT=9092 --env AUTO_CREATE_TOPICS=true -h kafka spotify/kafka
      - run:
          name: Run Koordinator tests with kafka
          command: |
            docker run --volumes-from configs --link kafka:kafka --env KOORDINATOR_URL=$KOORDINATOR_URL --env WORKER_USERNAME=$WORKER_USERNAME --env WORKER_PASSWORD=$WORKER_PASSWORD circleci/openjdk:8-jdk-browsers /src/project/.circleci/test.sh
workflows:
  version: 2
  build_and_test:
    jobs:
      - checkout_code
      - build_search_images:
          requires:
            - checkout_code
      - build_download_image:
          requires:
            - checkout_code
      - test_standalone:
          requires:
            - build_search_images
            - build_download_image
      - test_koordinator:
          requires:
            - build_search_images
            - build_download_image
